<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	<display-name>mvcApp00</display-name>
	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
	
	<!-- Spring MVC Framework 등록  -->	
	<!-- → Front Controller 등록 -->
	<!-- → DispatcherServlet 객체 등록 -->
	
<!-- 	
	dispatcher-servlet 은 안내 데스크 이런 것 들 다 해준다. 
	<servlet>
		<servlet-name>A</servlet-name>
		<servlet-class>패키지 경로 포함 클래스 → 컨트롤러(사용자 정의 컨트롤러)</servlet-class>		
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.action</url-pattern>	
	</servlet-mapping>
	
	 -->

<!-- 
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>		
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.action</url-pattern>	
	</servlet-mapping>
-->

	<!-- ※ 스프링 환경 설정  -->
	<!-- ContextLoaderListener : 서로 다른 DispatcherServlet 이 공통으로 사용될 빈 설정 -->
	<!-- 『<context-param>』 태그로 설정 파일을 지정하지 않으면 -->
	<!--  『applicationContext.xml』 이 설정 파일이 된다. -->
	
<!-- 		<context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
					/WEB-INF/service.xml.
					/WEB-INF/common.xml			
			</param-value>		
		</context-param>
-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<!-- 스프링 컨트롤러  -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!-- 주석 되어 있으면 기본적으로 dispatcherServlet을 찾는다.  -->
<!-- 	<init-param>
			<param-name>contextConfigLocation</param-name> // 설정파일 위치는 
			<param-value>								   // 이거다 
				/WEB-INF/dispatcher-servlet.xml,
				/WEB-INF/front.xml			
			</param-value>
		</init-param>	 -->
		<load-on-startup>1</load-on-startup>				<!-- 숫자가 같으면 작성 위치에 따라 달라진다.  -->
	</servlet>
	
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>*.action</url-pattern>
	</servlet-mapping>
		
	<!--
		<load-on-startup>
		- 『web.xml』 에서 servlet 을 설정 할 떄 사용되며, 설정 되는 값은 숫자이다.
		- 서블릿은 최초 요청이 들어 올 때 초기화된다.(init - 한번 ) 다음은 service service service
		  클래스 로딩 및 인스턴스화 초기화 설정을 해야하는 것이다.
		  이렇게 되면 서버가 올라가고 맨 처음 호출한 유저는
		  일반적으로 처리되는 시간보다 오래걸리게 된다.
	      이와 같은 상황을 방지하기 위해 『<load-on-startup>』 엘리먼트를 사용한다.
	    - 여기에 설정되는 숫자는 0보다 크면 서버가 구동되면서 서블릿을 초기화한다.
	      또한, 이숫자는 서블릿 인스턴스 생성 개수가 아니라 우선순위이다.
	      즉, 0보다 큰 값중에서 가장 낮은 수가 가장 먼저 초기화 되는 것이다.
	      같은 값이 존재할 경우 먼저 작성된 서블릿부터 초기화된다.
	
	
	
	
	
	  -->
	
	
	
		<!-- ★★★★★  -->
	<!-- 인코딩 필터 등록 -->
	<!-- CharacterEncodingFilter -->
	
	<filter>
		<filter-name>encodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	
		
	<!-- 필터 파라미터 초기값 지정 -->		
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
	</filter>
	
	
	<filter-mapping>
		<filter-name>encodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!-- /* → 모든 요청에 대하여 라는 의미  -->
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
</web-app>